using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class KaijuGameSyncModel
{
    [RealtimeProperty(1, true, true)]
    private string _state;

    [RealtimeProperty(2, true, true)]
    private int _timer;

    [RealtimeProperty(3, true, true)]
    private bool _vrPlayerReady;

    [RealtimeProperty(4, true, true)]
    private int _grabbedPlayerEvent; //ID of player last grabbed

    [RealtimeProperty(5, true, true)]
    private int _droppedPlayerEvent; //ID of player last dropped
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class KaijuGameSyncModel : RealtimeModel {
    public string state {
        get {
            return _stateProperty.value;
        }
        set {
            if (_stateProperty.value == value) return;
            _stateProperty.value = value;
            InvalidateReliableLength();
            FireStateDidChange(value);
        }
    }
    
    public int timer {
        get {
            return _timerProperty.value;
        }
        set {
            if (_timerProperty.value == value) return;
            _timerProperty.value = value;
            InvalidateReliableLength();
            FireTimerDidChange(value);
        }
    }
    
    public bool vrPlayerReady {
        get {
            return _vrPlayerReadyProperty.value;
        }
        set {
            if (_vrPlayerReadyProperty.value == value) return;
            _vrPlayerReadyProperty.value = value;
            InvalidateReliableLength();
            FireVrPlayerReadyDidChange(value);
        }
    }
    
    public int grabbedPlayerEvent {
        get {
            return _grabbedPlayerEventProperty.value;
        }
        set {
            if (_grabbedPlayerEventProperty.value == value) return;
            _grabbedPlayerEventProperty.value = value;
            InvalidateReliableLength();
            FireGrabbedPlayerEventDidChange(value);
        }
    }
    
    public int droppedPlayerEvent {
        get {
            return _droppedPlayerEventProperty.value;
        }
        set {
            if (_droppedPlayerEventProperty.value == value) return;
            _droppedPlayerEventProperty.value = value;
            InvalidateReliableLength();
            FireDroppedPlayerEventDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(KaijuGameSyncModel model, T value);
    public event PropertyChangedHandler<string> stateDidChange;
    public event PropertyChangedHandler<int> timerDidChange;
    public event PropertyChangedHandler<bool> vrPlayerReadyDidChange;
    public event PropertyChangedHandler<int> grabbedPlayerEventDidChange;
    public event PropertyChangedHandler<int> droppedPlayerEventDidChange;
    
    public enum PropertyID : uint {
        State = 1,
        Timer = 2,
        VrPlayerReady = 3,
        GrabbedPlayerEvent = 4,
        DroppedPlayerEvent = 5,
    }
    
    #region Properties
    
    private ReliableProperty<string> _stateProperty;
    
    private ReliableProperty<int> _timerProperty;
    
    private ReliableProperty<bool> _vrPlayerReadyProperty;
    
    private ReliableProperty<int> _grabbedPlayerEventProperty;
    
    private ReliableProperty<int> _droppedPlayerEventProperty;
    
    #endregion
    
    public KaijuGameSyncModel() : base(null) {
        _stateProperty = new ReliableProperty<string>(1, _state);
        _timerProperty = new ReliableProperty<int>(2, _timer);
        _vrPlayerReadyProperty = new ReliableProperty<bool>(3, _vrPlayerReady);
        _grabbedPlayerEventProperty = new ReliableProperty<int>(4, _grabbedPlayerEvent);
        _droppedPlayerEventProperty = new ReliableProperty<int>(5, _droppedPlayerEvent);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _stateProperty.UnsubscribeCallback();
        _timerProperty.UnsubscribeCallback();
        _vrPlayerReadyProperty.UnsubscribeCallback();
        _grabbedPlayerEventProperty.UnsubscribeCallback();
        _droppedPlayerEventProperty.UnsubscribeCallback();
    }
    
    private void FireStateDidChange(string value) {
        try {
            stateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTimerDidChange(int value) {
        try {
            timerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireVrPlayerReadyDidChange(bool value) {
        try {
            vrPlayerReadyDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireGrabbedPlayerEventDidChange(int value) {
        try {
            grabbedPlayerEventDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDroppedPlayerEventDidChange(int value) {
        try {
            droppedPlayerEventDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _stateProperty.WriteLength(context);
        length += _timerProperty.WriteLength(context);
        length += _vrPlayerReadyProperty.WriteLength(context);
        length += _grabbedPlayerEventProperty.WriteLength(context);
        length += _droppedPlayerEventProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _stateProperty.Write(stream, context);
        writes |= _timerProperty.Write(stream, context);
        writes |= _vrPlayerReadyProperty.Write(stream, context);
        writes |= _grabbedPlayerEventProperty.Write(stream, context);
        writes |= _droppedPlayerEventProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.State: {
                    changed = _stateProperty.Read(stream, context);
                    if (changed) FireStateDidChange(state);
                    break;
                }
                case (uint) PropertyID.Timer: {
                    changed = _timerProperty.Read(stream, context);
                    if (changed) FireTimerDidChange(timer);
                    break;
                }
                case (uint) PropertyID.VrPlayerReady: {
                    changed = _vrPlayerReadyProperty.Read(stream, context);
                    if (changed) FireVrPlayerReadyDidChange(vrPlayerReady);
                    break;
                }
                case (uint) PropertyID.GrabbedPlayerEvent: {
                    changed = _grabbedPlayerEventProperty.Read(stream, context);
                    if (changed) FireGrabbedPlayerEventDidChange(grabbedPlayerEvent);
                    break;
                }
                case (uint) PropertyID.DroppedPlayerEvent: {
                    changed = _droppedPlayerEventProperty.Read(stream, context);
                    if (changed) FireDroppedPlayerEventDidChange(droppedPlayerEvent);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _state = state;
        _timer = timer;
        _vrPlayerReady = vrPlayerReady;
        _grabbedPlayerEvent = grabbedPlayerEvent;
        _droppedPlayerEvent = droppedPlayerEvent;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
