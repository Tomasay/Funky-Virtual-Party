using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ParticleSystemSyncModel
{
    [RealtimeProperty(1, true, true)]
    private bool _playParticles;

    [RealtimeProperty(2, true, true)]
    private bool _stopParticles;

    [RealtimeProperty(3, true, true)]
    private Color _startColor;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ParticleSystemSyncModel : RealtimeModel {
    public bool playParticles {
        get {
            return _playParticlesProperty.value;
        }
        set {
            if (_playParticlesProperty.value == value) return;
            _playParticlesProperty.value = value;
            InvalidateReliableLength();
            FirePlayParticlesDidChange(value);
        }
    }
    
    public bool stopParticles {
        get {
            return _stopParticlesProperty.value;
        }
        set {
            if (_stopParticlesProperty.value == value) return;
            _stopParticlesProperty.value = value;
            InvalidateReliableLength();
            FireStopParticlesDidChange(value);
        }
    }
    
    public UnityEngine.Color startColor {
        get {
            return _startColorProperty.value;
        }
        set {
            if (_startColorProperty.value == value) return;
            _startColorProperty.value = value;
            InvalidateReliableLength();
            FireStartColorDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(ParticleSystemSyncModel model, T value);
    public event PropertyChangedHandler<bool> playParticlesDidChange;
    public event PropertyChangedHandler<bool> stopParticlesDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> startColorDidChange;
    
    public enum PropertyID : uint {
        PlayParticles = 1,
        StopParticles = 2,
        StartColor = 3,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _playParticlesProperty;
    
    private ReliableProperty<bool> _stopParticlesProperty;
    
    private ReliableProperty<UnityEngine.Color> _startColorProperty;
    
    #endregion
    
    public ParticleSystemSyncModel() : base(null) {
        _playParticlesProperty = new ReliableProperty<bool>(1, _playParticles);
        _stopParticlesProperty = new ReliableProperty<bool>(2, _stopParticles);
        _startColorProperty = new ReliableProperty<UnityEngine.Color>(3, _startColor);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _playParticlesProperty.UnsubscribeCallback();
        _stopParticlesProperty.UnsubscribeCallback();
        _startColorProperty.UnsubscribeCallback();
    }
    
    private void FirePlayParticlesDidChange(bool value) {
        try {
            playParticlesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireStopParticlesDidChange(bool value) {
        try {
            stopParticlesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireStartColorDidChange(UnityEngine.Color value) {
        try {
            startColorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _playParticlesProperty.WriteLength(context);
        length += _stopParticlesProperty.WriteLength(context);
        length += _startColorProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _playParticlesProperty.Write(stream, context);
        writes |= _stopParticlesProperty.Write(stream, context);
        writes |= _startColorProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PlayParticles: {
                    changed = _playParticlesProperty.Read(stream, context);
                    if (changed) FirePlayParticlesDidChange(playParticles);
                    break;
                }
                case (uint) PropertyID.StopParticles: {
                    changed = _stopParticlesProperty.Read(stream, context);
                    if (changed) FireStopParticlesDidChange(stopParticles);
                    break;
                }
                case (uint) PropertyID.StartColor: {
                    changed = _startColorProperty.Read(stream, context);
                    if (changed) FireStartColorDidChange(startColor);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _playParticles = playParticles;
        _stopParticles = stopParticles;
        _startColor = startColor;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
