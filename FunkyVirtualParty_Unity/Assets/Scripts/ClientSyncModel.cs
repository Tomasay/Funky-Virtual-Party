using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class ClientSyncModel
{
    [RealtimeProperty(1, true, true)]
    private string _name;

    [RealtimeProperty(2, true, true)]
    private Color _color;

    [RealtimeProperty(3, true, true)]
    private Color _nameColor;

    [RealtimeProperty(4, true, true)]
    private int _headType;

    [RealtimeProperty(5, true, true)]
    private float _height;

    [RealtimeProperty(6, true, true)]
    private int _hatIndex;

    [RealtimeProperty(7, false, true)]
    private float _animSpeed;

    [RealtimeProperty(8, true, true)]
    private int _danceIndex;

    [RealtimeProperty(9, true, true)]
    private bool _isReady;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class ClientSyncModel : RealtimeModel {
    public float animSpeed {
        get {
            return _animSpeedProperty.value;
        }
        set {
            if (_animSpeedProperty.value == value) return;
            _animSpeedProperty.value = value;
            InvalidateUnreliableLength();
            FireAnimSpeedDidChange(value);
        }
    }
    
    public string name {
        get {
            return _nameProperty.value;
        }
        set {
            if (_nameProperty.value == value) return;
            _nameProperty.value = value;
            InvalidateReliableLength();
            FireNameDidChange(value);
        }
    }
    
    public UnityEngine.Color color {
        get {
            return _colorProperty.value;
        }
        set {
            if (_colorProperty.value == value) return;
            _colorProperty.value = value;
            InvalidateReliableLength();
            FireColorDidChange(value);
        }
    }
    
    public UnityEngine.Color nameColor {
        get {
            return _nameColorProperty.value;
        }
        set {
            if (_nameColorProperty.value == value) return;
            _nameColorProperty.value = value;
            InvalidateReliableLength();
            FireNameColorDidChange(value);
        }
    }
    
    public int headType {
        get {
            return _headTypeProperty.value;
        }
        set {
            if (_headTypeProperty.value == value) return;
            _headTypeProperty.value = value;
            InvalidateReliableLength();
            FireHeadTypeDidChange(value);
        }
    }
    
    public float height {
        get {
            return _heightProperty.value;
        }
        set {
            if (_heightProperty.value == value) return;
            _heightProperty.value = value;
            InvalidateReliableLength();
            FireHeightDidChange(value);
        }
    }
    
    public int hatIndex {
        get {
            return _hatIndexProperty.value;
        }
        set {
            if (_hatIndexProperty.value == value) return;
            _hatIndexProperty.value = value;
            InvalidateReliableLength();
            FireHatIndexDidChange(value);
        }
    }
    
    public int danceIndex {
        get {
            return _danceIndexProperty.value;
        }
        set {
            if (_danceIndexProperty.value == value) return;
            _danceIndexProperty.value = value;
            InvalidateReliableLength();
            FireDanceIndexDidChange(value);
        }
    }
    
    public bool isReady {
        get {
            return _isReadyProperty.value;
        }
        set {
            if (_isReadyProperty.value == value) return;
            _isReadyProperty.value = value;
            InvalidateReliableLength();
            FireIsReadyDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(ClientSyncModel model, T value);
    public event PropertyChangedHandler<string> nameDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> colorDidChange;
    public event PropertyChangedHandler<UnityEngine.Color> nameColorDidChange;
    public event PropertyChangedHandler<int> headTypeDidChange;
    public event PropertyChangedHandler<float> heightDidChange;
    public event PropertyChangedHandler<int> hatIndexDidChange;
    public event PropertyChangedHandler<float> animSpeedDidChange;
    public event PropertyChangedHandler<int> danceIndexDidChange;
    public event PropertyChangedHandler<bool> isReadyDidChange;
    
    public enum PropertyID : uint {
        Name = 1,
        Color = 2,
        NameColor = 3,
        HeadType = 4,
        Height = 5,
        HatIndex = 6,
        AnimSpeed = 7,
        DanceIndex = 8,
        IsReady = 9,
    }
    
    #region Properties
    
    private ReliableProperty<string> _nameProperty;
    
    private ReliableProperty<UnityEngine.Color> _colorProperty;
    
    private ReliableProperty<UnityEngine.Color> _nameColorProperty;
    
    private ReliableProperty<int> _headTypeProperty;
    
    private ReliableProperty<float> _heightProperty;
    
    private ReliableProperty<int> _hatIndexProperty;
    
    private UnreliableProperty<float> _animSpeedProperty;
    
    private ReliableProperty<int> _danceIndexProperty;
    
    private ReliableProperty<bool> _isReadyProperty;
    
    #endregion
    
    public ClientSyncModel() : base(null) {
        _nameProperty = new ReliableProperty<string>(1, _name);
        _colorProperty = new ReliableProperty<UnityEngine.Color>(2, _color);
        _nameColorProperty = new ReliableProperty<UnityEngine.Color>(3, _nameColor);
        _headTypeProperty = new ReliableProperty<int>(4, _headType);
        _heightProperty = new ReliableProperty<float>(5, _height);
        _hatIndexProperty = new ReliableProperty<int>(6, _hatIndex);
        _animSpeedProperty = new UnreliableProperty<float>(7, _animSpeed);
        _danceIndexProperty = new ReliableProperty<int>(8, _danceIndex);
        _isReadyProperty = new ReliableProperty<bool>(9, _isReady);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _nameProperty.UnsubscribeCallback();
        _colorProperty.UnsubscribeCallback();
        _nameColorProperty.UnsubscribeCallback();
        _headTypeProperty.UnsubscribeCallback();
        _heightProperty.UnsubscribeCallback();
        _hatIndexProperty.UnsubscribeCallback();
        _danceIndexProperty.UnsubscribeCallback();
        _isReadyProperty.UnsubscribeCallback();
    }
    
    private void FireNameDidChange(string value) {
        try {
            nameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColorDidChange(UnityEngine.Color value) {
        try {
            colorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireNameColorDidChange(UnityEngine.Color value) {
        try {
            nameColorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHeadTypeDidChange(int value) {
        try {
            headTypeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHeightDidChange(float value) {
        try {
            heightDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHatIndexDidChange(int value) {
        try {
            hatIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireAnimSpeedDidChange(float value) {
        try {
            animSpeedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireDanceIndexDidChange(int value) {
        try {
            danceIndexDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIsReadyDidChange(bool value) {
        try {
            isReadyDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _nameProperty.WriteLength(context);
        length += _colorProperty.WriteLength(context);
        length += _nameColorProperty.WriteLength(context);
        length += _headTypeProperty.WriteLength(context);
        length += _heightProperty.WriteLength(context);
        length += _hatIndexProperty.WriteLength(context);
        length += _animSpeedProperty.WriteLength(context);
        length += _danceIndexProperty.WriteLength(context);
        length += _isReadyProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _nameProperty.Write(stream, context);
        writes |= _colorProperty.Write(stream, context);
        writes |= _nameColorProperty.Write(stream, context);
        writes |= _headTypeProperty.Write(stream, context);
        writes |= _heightProperty.Write(stream, context);
        writes |= _hatIndexProperty.Write(stream, context);
        writes |= _animSpeedProperty.Write(stream, context);
        writes |= _danceIndexProperty.Write(stream, context);
        writes |= _isReadyProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Name: {
                    changed = _nameProperty.Read(stream, context);
                    if (changed) FireNameDidChange(name);
                    break;
                }
                case (uint) PropertyID.Color: {
                    changed = _colorProperty.Read(stream, context);
                    if (changed) FireColorDidChange(color);
                    break;
                }
                case (uint) PropertyID.NameColor: {
                    changed = _nameColorProperty.Read(stream, context);
                    if (changed) FireNameColorDidChange(nameColor);
                    break;
                }
                case (uint) PropertyID.HeadType: {
                    changed = _headTypeProperty.Read(stream, context);
                    if (changed) FireHeadTypeDidChange(headType);
                    break;
                }
                case (uint) PropertyID.Height: {
                    changed = _heightProperty.Read(stream, context);
                    if (changed) FireHeightDidChange(height);
                    break;
                }
                case (uint) PropertyID.HatIndex: {
                    changed = _hatIndexProperty.Read(stream, context);
                    if (changed) FireHatIndexDidChange(hatIndex);
                    break;
                }
                case (uint) PropertyID.AnimSpeed: {
                    changed = _animSpeedProperty.Read(stream, context);
                    if (changed) FireAnimSpeedDidChange(animSpeed);
                    break;
                }
                case (uint) PropertyID.DanceIndex: {
                    changed = _danceIndexProperty.Read(stream, context);
                    if (changed) FireDanceIndexDidChange(danceIndex);
                    break;
                }
                case (uint) PropertyID.IsReady: {
                    changed = _isReadyProperty.Read(stream, context);
                    if (changed) FireIsReadyDidChange(isReady);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _name = name;
        _color = color;
        _nameColor = nameColor;
        _headType = headType;
        _height = height;
        _hatIndex = hatIndex;
        _animSpeed = animSpeed;
        _danceIndex = danceIndex;
        _isReady = isReady;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
